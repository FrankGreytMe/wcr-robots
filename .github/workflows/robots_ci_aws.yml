name: "Robots CI BUILD AND DEPLOY TO AWS"
run-name: >
  ${{ github.event_name == 'workflow_dispatch' 
      && format('Build and Deploy Robots to {0} environment', github.event.inputs.environment) 
      || format('Build and Deploy Robots to {0} environment', github.ref_name == 'master' && 'prod' || 'dev') }}
on:
  push: 
    branches: [main]
  workflow_call:
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: Type environment
        required: true
        default: dev
      tag:
        type: string
        description: Type robots tag
        required: true
        default: latest
      region:
        type: string
        description: Type region
        required: true
        default: "eu-central-1"

env:
  APPLICATION: "robot"
  APP_PATH: /opt/greyt
  ECR_URL: "${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ github.event.inputs.region || 'eu-central-1'}}.amazonaws.com"
  CONTAINER_REGISTRY: "ecr-robots"
  DOCKERFILE: "./docker/Dockerfile.service"

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev'}}
    steps:
      - uses: actions/checkout@v4
      - name: AWS login
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.region || 'eu-central-1'}}
      - name: EKS login
        run: |
          aws ecr get-login-password --region ${{ github.event.inputs.region || 'eu-central-1'}} | docker login --username AWS --password-stdin ${{ env.ECR_URL }}

      - name: Build and push
        run: |
          docker build -f ${{ env.DOCKERFILE }} --tag ${{ env.ECR_URL }}/${{ env.CONTAINER_REGISTRY }}:${{ github.event.inputs.tag || 'latest'}} .
          docker push ${{ env.ECR_URL }}/${{ env.CONTAINER_REGISTRY }}:${{ github.event.inputs.tag || 'latest'}}

  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev'}}
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install rsync and ssh
        run: |
          sudo apt-get update -y
          sudo apt-get install -y rsync openssh-client

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan ${{ secrets.SSH_IP }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Deploy application using Docker Compose
        run: |
          eval $(ssh-agent -s)
          echo "${{ secrets.SSH_KEY }}" | tr -d '\r' | ssh-add -
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }} <<EOF
          cd ${{ env.APP_PATH }}
          aws ecr get-login-password --region ${{ github.event.inputs.region || 'eu-central-1'}} | docker login --username AWS --password-stdin ${{ env.ECR_URL }}
          docker stop ${APPLICATION} proxy || true
          docker rm ${APPLICATION} proxy || true
          docker images --filter=reference="${{ env.ECR_URL }}/${{ env.CONTAINER_REGISTRY }}:*" --quiet | xargs -r docker rmi
          sed -i "s|^ROBOT=.*|ROBOT=${{ env.ECR_URL }}/${{ env.CONTAINER_REGISTRY }}:${{ github.event.inputs.tag || 'latest'}}|g" .env
          DB_HOST=${{ secrets.DB_HOST }} DB_PASSWORD=${{ secrets.DB_PASSWORD }} DB_USERNAME=${{ secrets.DB_USERNAME }} docker compose --profile ${{ github.event.inputs.environment || 'dev'}} pull ${APPLICATION}
          DB_HOST=${{ secrets.DB_HOST }} DB_PASSWORD=${{ secrets.DB_PASSWORD }} DB_USERNAME=${{ secrets.DB_USERNAME }} docker compose --profile ${{ github.event.inputs.environment || 'dev'}} up -d ${APPLICATION} proxy
          docker image prune -af
          EOF